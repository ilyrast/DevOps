---
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
  - build-code
  - build-docker
  - test
  - release
  - deploy-dev
  - deploy-prod

build-frontend-code:
  stage: build-code
  script:
    - cd frontend
    - npm install
    - VUE_APP_API_URL=/ npm run build
    - mkdir -p ../momo-store-${VERSION} 
    - mv dist ../momo-store-${VERSION}/public_html
  artifacts:
    paths:
      - momo-store-${VERSION}/public_html

build-frontend-docker:
  stage: build-docker
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - cp -R momo-store-${VERSION}/public_html frontend/
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/momo-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} -Dsonar.sources=. -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_LOGIN_FRONT}
  allow_failure: true


gitlab-sast:
  stage: test
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml 

release-front:
  needs:
    - build-frontend-docker
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA $VERSION

deploy-frontend-dev:
  needs:
    - release-front
  stage: deploy-dev
  image: docker:24.0.7-alpine3.19
  environment:
    name: production/frontend
  before_script:
    - apk add docker-cli-compose openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - ssh-keyscan -t rsa  ${DEV_HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - scp ./frontend/nginx.conf ${DEV_USER}@${DEV_HOST}:/home/deploy/nginx.conf
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker --context remote compose up frontend -d --pull "always" --force-recreate

deploy-frontend-k8s:
  needs:
    - deploy-frontend-dev
  stage: deploy-prod
  image: alpine/helm:3.9.3
  before_script:
    - mkdir -p ~/.kube
    - touch ~/.kube/config
    - echo "${kubeconfig}" | tee ~/.kube/config > /dev/null
    - pwd
  script:
    - 'sed -i "5s|: .*|: gitlab.praktikum-services.ru:5050/std-027-04/store_diplom/momo-frontend:${VERSION}|" infrastructure/helm/charts/frontend/values.yaml'
    - 'sed -i "20s|: .*|: ${dockerConfigSecret}|" infrastructure/helm/values.yaml'
    - helm dependency update ./charts/frontend
    - cd infrastructure/helm/charts/fontend
    - helm upgrade --debug --install --atomic momo-store ./
    - rm ~/.kube/config
  when: manual
