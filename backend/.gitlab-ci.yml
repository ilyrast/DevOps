#include:
#  - template: Security/SAST.gitlab-ci.yml

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
#  - build
#  - build_image
#  - test
#  - release
#  - deploy-dev
  - deploy-prod

#build-code:
#  stage: build
#  image: golang:1.17
#  variables:
#    GOPATH: $CI_PROJECT_DIR/backend/.go
#  before_script:
#    - mkdir -p backend/.go
#  script:
#    - cd backend/cmd/api/
#    - go build .
#    - mkdir -p $CI_PROJECT_DIR/momo-store-${VERSION}
#    - mv api $CI_PROJECT_DIR/momo-store-${VERSION}/
#  cache:
#    key: $CI_COMMIT_REF_SLUG
#    paths:
#      - backend/.go/pkg/mod/
#  artifacts:
#    paths:
#      - momo-store-${VERSION}/api

#build-backend-docker:
#  stage: build_image
#  image:
#    name: gcr.io/kaniko-project/executor:v1.9.0-debug
#    entrypoint: [""]
#  script:
#    - /kaniko/executor
#      --context "${CI_PROJECT_DIR}/momo-store-${VERSION}"
#      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
#      --destination "${CI_REGISTRY_IMAGE}/momo-backend:$CI_COMMIT_SHA"
#      --build-arg VERSION=${VERSION}
#      --cache=true
 #     --cache-copy-layers

#unit-test:
#  stage: test
#  image: golang:1.17
#  variables:
#    GOPATH: $CI_PROJECT_DIR/backend/.go
#    GIT_DEPTH: "0"
#  script:
#    - cd backend
#    - go test -v ./... 
#  cache:
#    key: $CI_COMMIT_REF_SLUG
#    paths:
#      - backend/.go/pkg/mod/

#gosec-sast:
#  stage: test
#  variables:
#    GOPATH: $CI_PROJECT_DIR/backend/.go
#  before_script:
#    - |
#      cat <<EOF > ~/.netrc
#      machine gitlab.praktikum-services.ru
#      login $GITLAB_USER_LOGIN
#      password $GITLAB_TOKEN
#      EOF
#  script:
#    - /analyzer run --target-dir ${CI_PROJECT_DIR}/backend/
#  cache:
#    key: $CI_COMMIT_REF_SLUG
#    paths:
#      - backend/.go/pkg/mod/

#sonarqube-backend-sast:
#  stage: test
#  image: sonarsource/sonar-scanner-cli:latest
#  variables:
#    GIT_DEPTH: "0"
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - cd backend
#    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_LOGIN} -Dsonar.projectKey=${BACKEND_KEY}
#  allow_failure: true

#upload-backend:
 # stage: release
 # variables:
 #   GIT_STRATEGY: none
 # image: 
 #   name: gcr.io/go-containerregistry/crane:debug
 #   entrypoint: [ "" ]
 # before_script:
 #   - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
 # script:
 #   - crane tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $VERSION

#deploy-backend-host:
#  needs:
#    - upload-backend
#  stage: deploy-dev
#  image: docker:24.0.7-alpine3.19
#  environment:
#    name: production/backend
#  before_script:
#    - apk add docker-cli-compose openssh-client bash
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 600 ~/.ssh
#    - ssh-keyscan -t rsa  ${DEV_HOST} >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
#  script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker --context remote compose up backend -d --pull "always" --force-recreate

deploy-backend-k8s:
#  needs:
#    - deploy-backend-host
  stage: deploy-prod
  image: alpine/helm:3.9.3
  before_script:
    - apk add --no-cache curl bash
    - curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
    - mkdir -p ~/.kube
    - touch ~/.kube/config
    - echo "${kubeconfig}" | tee ~/.kube/config > /dev/null
  script:
    - cd infrastructure/helm
    - helm upgrade --install --atomic momo-store ./
    - rm ~/.kube/config
  when: manual
